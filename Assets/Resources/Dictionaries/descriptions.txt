### BubbleSort
Sortowanie bąbelkowe to algorytm, który działa poprzez wielokrotne przechodzenie przez listę. W każdej iteracji porównuje dwa sąsiednie elementy i zamienia je miejscami, jeśli są w złej kolejności. Po każdej pełnej iteracji największy element zostaje "wypchnięty" na koniec listy. Proces powtarza się, aż lista będzie posortowana.
### QuickSort
Sortowanie szybkie to algorytm oparty na metodzie "dziel i zwyciężaj". Wybiera element zwany pivotem i dzieli listę na dwie części: jedną z elementami mniejszymi od pivota i drugą z większymi. Następnie każda część jest sortowana rekurencyjnie. Algorytm jest szczególnie efektywny dla dużych zbiorów danych.
### MergeSort
Sortowanie przez scalanie to algorytm, który dzieli listę na dwie części, a następnie rekurencyjnie sortuje obie te części. Po ich posortowaniu łączy je w sposób uporządkowany, tworząc ostateczną posortowaną listę. Kluczowym elementem algorytmu jest efektywne łączenie dwóch posortowanych podlist.
### BucketSort
Sortowanie kubełkowe dzieli dane na grupy, zwane kubełkami, które odpowiadają przedziałom wartości. Następnie każdy kubełek jest sortowany indywidualnie, najczęściej przy użyciu innego algorytmu sortującego, a na końcu posortowane kubełki są łączone w jedną posortowaną listę.
### InsertionSort
Sortowanie przez wstawianie to algorytm, który działa poprzez iteracyjne wybieranie kolejnych elementów z listy i wstawianie ich w odpowiednie miejsce w już posortowanej części listy. Zaczyna od drugiego elementu i porównuje go z poprzednim, przesuwając większe elementy w prawo, aż znajdzie odpowiednią pozycję do wstawienia. Ten proces powtarza się dla każdego elementu na liście, aż cała lista zostanie posortowana.
### SelectSort
Sortowanie przez wybór polega na znalezieniu najmniejszego elementu w nieposortowanej części listy i zamianie go z pierwszym elementem tej części. Następnie proces jest powtarzany dla reszty listy, aż wszystkie elementy będą posortowane. Algorytm ten jest prosty, ale mało efektywny dla dużych zbiorów danych.
### StackStruct
Stos to struktura danych działająca na zasadzie LIFO (Last In, First Out). Oznacza to, że ostatni dodany element jest usuwany jako pierwszy. Podstawowe operacje na stosie to push (dodanie elementu na szczyt stosu), pop (usunięcie elementu ze szczytu) i top (sprawdzenie elementu na szczycie). Stos jest używany w wielu algorytmach rekurencyjnych oraz przy obsłudze wyrażeń arytmetycznych.
### QueueStruct
Kolejka to struktura danych działająca na zasadzie FIFO (First In, First Out), czyli pierwszy dodany element jest usuwany jako pierwszy. Podstawowe operacje na kolejce to enqueue (dodanie elementu na koniec kolejki), dequeue (usunięcie elementu z początku kolejki) i front (sprawdzenie elementu na początku). Kolejki są wykorzystywane w systemach zarządzania zadaniami i w algorytmach przeszukiwania grafów, takich jak BFS.
### ListStruct
Lista to struktura danych przechowująca uporządkowane elementy. Podstawowe operacje na liście to insert (dodanie elementu), remove (usunięcie elementu) oraz get (sprawdzenie elementu). Umożliwia dodawanie i usuwanie elementów w dowolnym miejscu oraz przechodzenie po elementach za pomocą iteratora. Lista jest wykorzystywana do dynamicznego przechowywania danych i elastycznego zarządzania elementami.
### DFSGraph
Algorytm przeszukiwania grafu w głąb (Depth-First Search) eksploruje graf, odwiedzając kolejne wierzchołki możliwie jak najdalej od punktu początkowego, zanim nastąpi cofnięcie do poprzedniego wierzchołka. Wykorzystywany jest m.in. do wykrywania cykli, analizy spójności, generowania drzew rozpinających oraz rozwiązywania problemów rekurencyjnych.
### BFSGraph
Algorytm przeszukiwania grafu wszerz (Breadth-First Search) eksploruje graf warstwowo, zaczynając od danego wierzchołka i odwiedzając wszystkich jego sąsiadów przed przejściem na kolejną warstwę. Znajduje zastosowanie w wyznaczaniu najkrótszych ścieżek w grafach nieskierowanych oraz w algorytmach planowania i analizy sieci.
### DijkstraGraph
Algorytm Dijkstry znajduje najkrótszą ścieżkę w grafie ważonym, zakładając, że wszystkie krawędzie mają nieujemne wagi. Rozpoczyna od źródła i za pomocą kolejki priorytetowej wybiera wierzchołek o najmniejszym koszcie dojścia, aktualizując koszty dla sąsiednich wierzchołków. Algorytm zapewnia najkrótsze ścieżki do wszystkich wierzchołków w grafie. Jeśli istnieje kilka najkrótszych ścieżek do danego wierzchołka, algorytm wybiera pierwszą znalezioną.
### GrahamAlgo
Algorytm Grahama to algorytm służący do znajdowania otoczki wypukłej zbioru punktów na płaszczyźnie. Najpierw wybiera punkt o najmniejszej współrzędnej Y, sortuje pozostałe według kąta względem niego, a następnie używa stosu do budowy otoczki. Blah Blah Blah, i tak tego nie wykorzystujemy xd.
###
